<config xmlns="urn:org:jgroups"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:org:jgroups http://www.jgroups.org/schema/JGroups-3.1.xsd">

    <TUNNEL gossip_router_hosts="${portico.wan.router:127.0.0.1[12001]}"
            tcp_nodelay="true"/>

    <!-- Discovery protocol. Timeout of 5 seconds, with a random stagger of
         100ms applied to ensure people don't all fire up at once -->
    <PING timeout="5000"
          stagger_timeout="100"
          num_initial_members="1"
          break_on_coord_rsp="true"/>

    <!-- When federations go rouge, merge them back together. This will really
         get hairy if they've got differnet FOMs, as merging state can cause all
         sorts of pain I don't want to think about, so we just don't do it. I'd
         expect to see all sorts of ObjectClassNotKnown errors and the like from
         diverging FOMs in this case, but it's an edge case, so who cares, right? -->
    <MERGE3 max_interval="30000" min_interval="10000"/>

    <!-- Detect when a federate has gone tits-up with a simple heartbeat algorithm.
         We can turn on countMessages which will treat all messages received from a
         federate as a heartbeat, but this add overhead and apparently isn't
         recommended. Leave it off for now -->
    <FD_ALL interval="${portico.jgroups.fd.interval:3000}"
            timeout="${portico.jgroups.fd.timeout:8500}"
            msg_counts_as_heartbeat="${portico.jgroups.fd.countMessages:false}"/>

    <!-- More failure detection. This one has a ring of TCP sockets where
         neighbours link up and catch when the socket closes. Not sure if
         this is a good things or not for our federation, but let's say yes
         for now and disable it later if we want -->
    <!--<FD_SOCK/>-->

    <!-- When we think we have a dead federate, as determined by the FD protocols,
         we need to finally verify this. VERIFY_SUSPECT will ping the suspect,
         waiting at most timeout millis before giving up and calling it dead -->
    <VERIFY_SUSPECT timeout="1500"/>

    <!-- Used internally to block threads during state transfer -->
    <BARRIER/>

    <!-- NAKACK2 provides the reliable, ordered properties to our comms -->
    <pbcast.NAKACK2 xmit_interval="1000"
                    xmit_table_num_rows="100"
                    xmit_table_msgs_per_row="2000"
                    xmit_table_max_compaction_time="30000"
                    max_msg_batch_size="500"
                    use_mcast_xmit="true"
                    discard_delivered_msgs="true"/>

    <!-- UNICAST2 delivers reliable and ordered messaging for unicast UDP messages -->
    <UNICAST2 max_bytes="20M"
              xmit_table_num_rows="100"
              xmit_table_msgs_per_row="1000"
              xmit_table_max_compaction_time="30000"
              max_msg_batch_size="500"/>

    <!-- RSVP causes message send with the RSVP header to block the sending call
         until all recipients have acknowledged they got it. If ack_on_delivery
         is set true, an ACK is only be sent after the message has been processed -->
    <RSVP ack_on_delivery="true" throw_exception_on_timeout="true"/>

    <!-- The STABLE protocol helps ensure only the minimum number of messages are
         kept around in case they are needed for retransmission.  -->
    <pbcast.STABLE max_bytes="4M"
                   stability_delay="2000"
                   desired_avg_gossip="60000"
                   cap="0.1"/>

    <!-- GMS provides generation Group Memebership Services, handling group join
         requests, view updates and changes and anything membership related -->
    <pbcast.GMS print_local_addr="true"
                join_timeout="${portico.jgroups.gms.jointimeout:3000}"
                view_bundling="true"
                max_bundling_time="1000"
                merge_timeout="5000"
                resume_task_timeout="15000"/>

    <!-- Flow control prevents any single sender overwhelming slower receivers
         with messages which could cause them to be dropped -->
    <UFC max_credits="4M" min_threshold="0.4"/>
    <MFC max_credits="4M" min_threshold="0.4"/>

    <!-- FRAG2 breaks up large messages into smaller sizes so they can be send in chunks -->
    <FRAG2 frag_size="60k"/>

    <!-- Handles streaming state transfer when applications join a channel -->
    <pbcast.STATE_TRANSFER/>

    <!-- FLUSH forces all group members to send all pending messages prior to
         some event such as the joining of a new member -->
    <pbcast.FLUSH retry_timeout="3000"/>
</config>
